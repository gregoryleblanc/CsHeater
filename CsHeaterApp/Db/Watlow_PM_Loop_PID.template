####  Macro Definitions  ####
# (ta)	- Target Area
# (ss)	- Device Name
# (i)	- Channel or Index
# (AtSP)- Autotune Setpoint
# (AUt)	- Autotune
# (tAgr)- Autotune Aggressiveness
# (hAg)	- Heat Algorithm
# (hPb)	- Heat Proportional Band
# (Cti)	- Time Integral
# (Ctd)	- Time Derivative


# ***********************************************************************
# ** nd  indicates nanodac specific.
# ** use indicates to utilize field or record.
# **         following line indicates what the Watlow PV reference is.
# ** ??  indicates not sure how or where used and needs investigation.
# **     no marking indicates use without change
# ***********************************************************************


#=========== Watlow Registers ===========

#### Autotune Setpoint
record(ao, "$(ta):$(ss):ATuneSetpoint$(ch)") 
{
	field(ASG,	"$(ASG=BEAMLINE)")
	field(SCAN,	"Passive")
	field(DTYP,	"asynFloat64")
	field(OUT,	"@asyn(watlow.w.1,$(AtSP),2000)FLOAT32_BE")
	field(EGU,	"%")
	field(PREC,	"1")
	field(DRVL,	"50")
	field(DRVH,	"200")
	field(FLNK,	"$(ta):$(ss):ATuneSetpoint$(ch)RB")
}

## Autotune Setpoint RB
record(ai, "$(ta):$(ss):ATuneSetpoint$(ch)RB") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynFloat64")
	field(INP,	"@asyn(watlow_CL_Num_$(ch).1,28,2000)FLOAT32_BE")
	field(EGU,	"%")
	field(PREC,	"1")
	field(MDEL,	"0.1")
    field(PROC, "")
}


#### Autotune Request
record(ao, "$(ta):$(ss):Autotune$(ch)") 
{
	field(ASG,	"$(ASG=BEAMLINE)")
	field(PINI,	"YES")
	field(DTYP,	"asynInt32")
	field(OUT,	"@asynMask(watlow.w.1,$(AUt),0xFF,2000)UINT16")
}

## Autotune RB
record(mbbi, "$(ta):$(ss):Autotune$(ch)RB") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynUInt32Digital")
	field(INP,	"@asynMask(watlow_CL_Num_$(ch).1,40,0xFF,2000)UINT16")
	field(ZRST,	"No")
	field(ZRVL,	"59")
	field(ONST,	"Yes")
	field(ONVL,	"106")
    field(PROC, "")
}


#### Autotune Aggressiveness
record(mbbo, "$(ta):$(ss):Aggressiveness$(ch)") 
{
	field(ASG,	"$(ASG=BEAMLINE)")
	field(SCAN,	"Passive")
	field(DTYP,	"asynUInt32Digital")
	field(OUT,	"@asynMask(watlow.enum.w,$(tAgr),0xFF,2000)UINT16")
	field(ZRST,	"Under Damped")
	field(ZRVL,	"99")
	field(ONST,	"Critical Damped")
	field(ONVL,	"21")
	field(TWST,	"Over Damped")
	field(TWVL,	"69")
	field(FLNK,	"$(ta):$(ss):Aggressiveness$(ch)RB")
}
## Autotune Aggressiveness RB
record(mbbi, "$(ta):$(ss):Aggressiveness$(ch)RB") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynUInt32Digital")
	field(INP,	"@asynMask(watlow_CL_Num_$(ch).1,36,0xFF,2000)UINT16")
	field(ZRST,	"Under Damped")
	field(ZRVL,	"99")
	field(ONST,	"Critical Damped")
	field(ONVL,	"21")
	field(TWST,	"Over Damped")
	field(TWVL,	"69")
    field(PROC, "")
}


#### Heat Algorithm
record(mbbo, "$(ta):$(ss):HeatMethod$(ch)") 
{
	field(ASG,	"$(ASG=BEAMLINE)")
	field(SCAN,	"Passive")
	field(DTYP,	"asynUInt32Digital")
	field(OUT,	"@asynMask(watlow.enum.w,$(hAg),0xFF,2000)UINT16")
	field(ZRST,	"Off")
	field(ZRVL,	"62")
	field(ONST,	"PID")
	field(ONVL,	"71")
	field(TWST,	"On/Off")
	field(TWVL,	"64")
	field(FLNK,	"$(ta):$(ss):HeatMethod$(ch)RB")
}

## Heat Algorithm RB
record(mbbi, "$(ta):$(ss):HeatMethod$(ch)RB") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynUInt32Digital")
	field(INP,	"@asynMask(watlow_CL_Num_$(ch).1,4,0xFF,2000)UINT16")
	field(ZRST,	"Off")
	field(ZRVL,	"62")
	field(ONST,	"PID")
	field(ONVL,	"71")
	field(TWST,	"On/Off")
	field(TWVL,	"64")
    field(PROC, "")
}


#### Heat Proportional Band
record(ao, "$(ta):$(ss):HeatPID_P$(ch)") 
{
	field(ASG,	"$(ASG=BEAMLINE)")
	field(SCAN,	"Passive")
	field(DTYP,	"asynFloat64")
	field(OUT,	"@asyn(watlow.w.1,$(hPb),2000)FLOAT32_BE")
	field(EGU,	"°")
	field(PREC,	"3")
	field(FLNK,	"$(ta):$(ss):HeatPID_P$(ch)RB")
}
## Heat Proportional Band RB
record(ai, "$(ta):$(ss):HeatPID_P$(ch)RB") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynFloat64")
	field(INP,	"@asyn(watlow_CL_Num_$(ch).1,10,2000)FLOAT32_BE")
	field(EGU,	"°")
	field(PREC,	"3")
	field(MDEL,	"0.1")
    field(PROC, "")
}


#### Time Integral
record(ao, "$(ta):$(ss):PID_I$(ch)") 
{
	field(ASG,	"$(ASG=BEAMLINE)")
	field(SCAN,	"Passive")
	field(DTYP,	"asynFloat64")
	field(OUT,	"@asyn(watlow.w.1,$(Cti),2000)FLOAT32_BE")
	field(EGU,	"s")
	field(PREC,	"0")
	field(DRVL,	"0")
	field(DRVH,	"9999")
	field(FLNK,	"$(ta):$(ss):PID_I$(ch)RB")
}
## Time Integral RB
record(ai, "$(ta):$(ss):PID_I$(ch)RB") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynFloat64")
	field(INP,	"@asyn(watlow_CL_Num_$(ch).1,14,2000)FLOAT32_BE")
	field(EGU,	"s")
	field(PREC,	"0")
	field(MDEL,	"0.1")
    field(PROC, "")
}

#### Time Derivative
record(ao, "$(ta):$(ss):PID_D$(ch)") 
{
	field(ASG,	"$(ASG=BEAMLINE)")
	field(SCAN,	"Passive")
	field(DTYP,	"asynFloat64")
	field(OUT,	"@asyn(watlow.w.1,$(Ctd),2000)FLOAT32_BE")
	field(EGU,	"s")
	field(PREC,	"0")
	field(DRVL,	"0")
	field(DRVH,	"9999")
	field(FLNK,	"$(ta):$(ss):PID_D$(ch)RB")
}
## Time Derivative RB
record(ai, "$(ta):$(ss):PID_D$(ch)RB") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynFloat64")
	field(INP,	"@asyn(watlow_CL_Num_$(ch).1,16,2000)FLOAT32_BE")
	field(EGU,	"s")
	field(PREC,	"0")
	field(MDEL,	"0.1")
}



#########################################################
# Instantiate a software PID table for this control loop. 
# The input PV is set to the Loop input PV, whatever that is
# on the controller.

substitute "PV=$(ta):$(ss):ActiveSV$(ch)"
substitute "UNITS=K"

substitute "P_LINK=$(ta):$(ss):HeatPID_P$(ch)"
substitute "I_LINK=$(ta):$(ss):PID_I$(ch)"
substitute "D_LINK=$(ta):$(ss):PID_D$(ch)"

substitute "P=0"
substitute "I=0"
substitute "D=0"

substitute "Prb=0"
substitute "Irb=0"
substitute "Drb=0"

substitute "W=1"
include "pid_set_window.template"
include "Update_PID_Set.template"
substitute "W=2"
include "pid_set_window.template"
include "Update_PID_Set.template"
substitute "W=3"
include "pid_set_window.template"
include "Update_PID_Set.template"
substitute "W=4"
include "pid_set_window.template"
include "Update_PID_Set.template"
substitute "W=5"
include "pid_set_window.template"
include "Update_PID_Set.template"
substitute "W=6"
include "pid_set_window.template"
include "Update_PID_Set.template"
substitute "W=7"
include "pid_set_window.template"
include "Update_PID_Set.template"
substitute "W=8"
include "pid_set_window.template"
include "Update_PID_Set.template"
substitute "W=9"
include "pid_set_window.template"
include "Update_PID_Set.template"
substitute "W=10"
include "pid_set_window.template"
include "Update_PID_Set.template"



# ///
# /// Record to enable/disable the table
# ///
record(bo, "$(ta):$(ss):PID:TableControl")
{
	field(PINI,	"YES")
	field(VAL,	"0")
	field(ZNAM,	"Table Enabled")
	field(ONAM,	"Table Disabled")
	field(ZSV,	"NO_ALARM")
	field(OSV,	"MAJOR")
	field(FLNK,	"$(ta):$(ss):PID:TableControlSet")
	info(autosaveFields, "VAL")
}

record(dfanout, "$(ta):$(ss):PID:TableControlSet")
{
	field(OMSL,	"closed_loop")
	field(DOL,	"$(ta):$(ss):PID:TableControl")
	field(OUTA,	"$(ta):$(ss):PID:Set1:Disable PP")
	field(OUTB,	"$(ta):$(ss):PID:Set2:Disable PP")
	field(OUTC,	"$(ta):$(ss):PID:Set3:Disable PP")
	field(OUTD,	"$(ta):$(ss):PID:Set4:Disable PP")
	field(OUTE,	"$(ta):$(ss):PID:Set5:Disable PP")
	field(OUTF,	"$(ta):$(ss):PID:Set6:Disable PP")
	field(OUTG,	"$(ta):$(ss):PID:Set7:Disable PP")
	field(OUTH,	"$(ta):$(ss):PID:Set8:Disable PP")
	field(FLNK,	"$(ta):$(ss):PID:TableControlSet2")
}

record(dfanout, "$(ta):$(ss):PID:TableControlSet2")
{
	field(OMSL,	"closed_loop")
	field(DOL,	"$(ta):$(ss):PID:TableControl")
	field(OUTA,	"$(ta):$(ss):PID:Set9:Disable PP")
	field(OUTB,	"$(ta):$(ss):PID:Set10:Disable PP")
	field(OUTC,	"$(ta):$(ss):PID:Set11:Disable PP")
	field(OUTD,	"$(ta):$(ss):PID:Set12:Disable PP")
	field(OUTE,	"$(ta):$(ss):PID:Set13:Disable PP")
	field(OUTF,	"$(ta):$(ss):PID:Set14:Disable PP")
	field(OUTG,	"$(ta):$(ss):PID:Set15:Disable PP")
	field(OUTH,	"$(ta):$(ss):PID:Set16:Disable PP")
}




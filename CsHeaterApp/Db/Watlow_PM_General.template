####  Macro Definitions  ####
#  (s) - Beam Line
# (ta) - Target Area
# (ss) - Device Name


#=========== Lock/Factory Menu ===========

## Operations Security
#record(ao, "Cs:Source:OvenHeater:$(mod):OperationsSecurity")
#{
#	field(SCAN,	"Passive")
#	field(DTYP,	"asynInt32")
#	field(OUT,	"@asyn(watlow_Glb_Num_1.$(mod),2302,2000)INT32_BE")
#	field(DRVL,	"1")
#	field(DRVH,	"3")
#}

## Read Lock
#record(ao, "Cs:Source:OvenHeater:$(mod):ReadLock")
#{
#	field(SCAN,	"Passive")
#	field(DTYP,	"asynInt32")
#	field(OUT,	"@asyn(watlow_Glb_Num_1.$(mod),2318,2000)INT32_BE")
#	field(DRVL,	"1")
#	field(DRVH,	"5")
#}

## Write Lock
#record(ao, "Cs:Source:OvenHeater:$(mod):WriteLock")
#{
#	field(SCAN,	"Passive")
#	field(DTYP,	"asynInt32")
#	field(OUT,	"@asyn(watlow_Glb_Num_1.$(mod),2314,2000)INT32_BE")
#	field(DRVL,	"0")
#	field(DRVH,	"5")
#}

# Software Revision
record(ai, "Cs:Source:OvenHeater:$(mod):SoftwareRev")
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynInt32")
	field(INP,	"@asyn(watlow_Glb_Num_1.$(mod),4,2000)INT32_BE")
	field(MDEL,	"1")
}

# Serial Number
record(ai, "Cs:Source:OvenHeater:$(mod):SerialNumber") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynInt32")
	field(INP,	"@asyn(watlow_Glb_Num_1.$(mod),12,2000)INT32_BE")
	field(MDEL,	"1")
}

# Software Build Number
record(ai, "Cs:Source:OvenHeater:$(mod):SoftwareBuild") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynInt32")
	field(INP,	"@asyn(watlow_Glb_Num_1.$(mod),8,2000)INT32_BE")
	field(MDEL,	"1")
}

# Date of Manufacture
record(ai, "Cs:Source:OvenHeater:$(mod):MakeDate") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynInt32")
	field(INP,	"@asyn(watlow_Glb_Num_1.$(mod),14,2000)INT32_BE")
	field(MDEL,	"1")
}

# Hardware ID
record(ai, "Cs:Source:OvenHeater:$(mod):HardwareID") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynInt32")
	field(INP,	"@asyn(watlow_Glb_Num_1.$(mod),0,2000)INT32_BE")
	field(MDEL,	"1")
}

# Firmware ID
record(ai, "Cs:Source:OvenHeater:$(mod):FirmwareID") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynInt32")
	field(INP,	"@asyn(watlow_Glb_Num_1.$(mod),2,2000)INT32_BE")
	field(MDEL,	"1")
}

# Device Status
record(mbbi, "Cs:Source:OvenHeater:$(mod):DeviceStatus") 
{
	field(SCAN,	"10 second")
	field(PINI,	"YES")
	field(DTYP,	"asynUInt32Digital")
	field(INP,	"@asynMask(watlow.enum.w.$(mod),30,0xFF,2000)UINT16")
	field(ZRST,	"Nominal")
	field(ZRVL,	"138")
	field(ONST,	"Fault")
	field(ONVL,	"32")
}



#=========== Global Menu ===========

# Ramp Type
record(mbbo, "Cs:Source:OvenHeater:$(mod):RampType") 
{
	field(SCAN,	"Passive")
	field(PINI,	"YES")
	field(DTYP,	"asynUInt32Digital")
	field(OUT,	"@asynMask(watlow.enum.w.$(mod),4414,0xFF,2000)UINT16")
	field(ZRST,	"Rate")
	field(ZRVL,	"81")
	field(ONST,	"Time")
	field(ONVL,	"143")
}

# Units
record(mbbo, "Cs:Source:OvenHeater:$(mod):Units")
{
	field(SCAN,	"Passive")
	field(PINI,	"YES")
	field(DTYP,	"asynUInt32Digital")
	field(OUT,	"@asynMask(watlow.enum.w.$(mod),2308,0xFF,2000)UINT16")
	field(ZRST,	"°F")
	field(ZRVL,	"30")
	field(ONST,	"°C")
	field(ONVL,	"15")
}

#=========== Module Level Alarm Handling  ===========
# Conditions for an alarm for each module:
##	1. If the master alarm disable control is set to Enable (0) process next step.
##	2. If the module's Control Mode is not set to Off (0) process next step.
##	3. First check the communication status.  Set the communciations status indicator.
##	4. Next, check all status conditions and alarms of the module along with the communication status.


# Process the communication status check.
record(calcout, "Cs:Source:OvenHeater:$(mod):CommsAlarmCalc")
{
	field(INPA,	"Cs:Source:OvenHeater:$(mod):ControlMode$(ch)RB.SEVR CP")
	field(CALC,	"A==3")
	field(OOPT,	"Every Time")
	field(DOPT,	"Use CALC")
	field(OUT,	"Cs:Source:OvenHeater:$(mod):CommStatusInd PP")
}

# Update the communication status indication.
record(mbbi, "Cs:Source:OvenHeater:$(mod):CommStatusInd") 
{
	field(ZRST,	"Nominal")
	field(ONST,	"Fault")
}

# Check all Alarm States
# Alarm State:	Startup (88), None (61), Blocked (12), Alarm low (8), Alarm high (7), Error (28)
# If all Alarm State records equal 61 then ModAlarms should be set to , else 1.
######
# Initially the calc record was using the Watlow register values for the representation to perform
# the calculation.  After monitoring the PVs it was discoverd that the index value of the enum
# is what is being reported.  Therefore, the calculation was changed to the index value.
record(calc, "Cs:Source:OvenHeater:$(mod):ModAlarmStates")
{
	field(INPA,	"Cs:Source:OvenHeater:$(mod):AlarmState1 CP")
	field(INPB,	"Cs:Source:OvenHeater:$(mod):AlarmState2 CP")
	field(INPC,	"Cs:Source:OvenHeater:$(mod):AlarmState3 CP")
	field(INPD,	"Cs:Source:OvenHeater:$(mod):AlarmState4 CP")
	field(INPE,	"Cs:Source:OvenHeater:$(mod):AlarmType1 CP")
	field(INPF,	"Cs:Source:OvenHeater:$(mod):AlarmType2 CP")
	field(INPG,	"Cs:Source:OvenHeater:$(mod):AlarmType3 CP")
	field(INPH,	"Cs:Source:OvenHeater:$(mod):AlarmType4 CP")
	field(CALC,	"(A>2 && E#0)||(B>2 && F#0)||(C>2 && G#0)||(D>2 && H#0)?1:0")
}

# If the module is in an operation mode check the status of the alarms and process the module master alarm
# Device Status:	OK (138), Fail (32)
# Limit State:	Off (62), None (61), Limit High (51), Limit Low (52), Error (28)
# Open Loop Error Status:	None (61), Open Loop (1274), Reversed Sensor (1275)
# If ControlMode <> Off (0) set out to 0 else process the remainder alarms.
record(calcout, "Cs:Source:OvenHeater:$(mod):PrcsModAlarms")
{
	field(INPA,	"Cs:Source:OvenHeater:$(mod):ControlMode$(ch) CP")
	field(INPB,	"Cs:Source:OvenHeater:$(mod):DeviceStatus CP")
	field(INPC,	"Cs:Source:OvenHeater:$(mod):LimitState CP")
	field(INPD,	"Cs:Source:OvenHeater:$(mod):OpenLoopError1 CP")
	field(INPE,	"Cs:Source:OvenHeater:$(mod):CommStatusInd CP")
	field(INPF,	"Cs:Source:OvenHeater:$(mod):ModAlarmStates CP")
	field(CALC,	"(A=0)?0:(B=1||C#1||D#0||E=1||F=1)+1")
	field(DOPT,	"Use CALC")
	field(OOPT,	"Every Time")
	field(OUT,	"Cs:Source:OvenHeater:$(mod):ModAlarmSummary PP")
}

# Master alarm state for the module
record(mbbi, "Cs:Source:OvenHeater:$(mod):ModAlarmSummary")
{
	field(PINI,	"YES")
	field(SCAN,	"Passive")
	field(ZRVL,	"0")
	field(ZRST,	"Offline")
	field(ONVL,	"1")
	field(ONST,	"No Alarm")
	field(TWVL,	"2")
	field(TWST,	"Alarm")
#	field(OSV,	"MAJOR")
	info(archive, "Monitor, 00:00:01, VAL")
}



